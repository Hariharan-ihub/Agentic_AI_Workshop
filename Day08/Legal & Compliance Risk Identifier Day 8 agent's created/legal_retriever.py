import os
from typing import Dict, List, Any, Optional
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import ChatPromptTemplate
from langchain.chains import LLMChain
from pydantic import BaseModel, Field
from utils import VectorStore

class LegalDocument(BaseModel):
    """Schema for legal documents"""
    title: str = Field(description="Title of the legal document")
    source: str = Field(description="Source of the document")
    content: str = Field(description="Content of the legal document")
    jurisdiction: str = Field(description="Jurisdiction this document applies to")
    type: str = Field(description="Type of document (guideline, regulation, playbook, etc.)")

class LegalRetrieverAgent:
    def __init__(self, vector_store: VectorStore):
        self.vector_store = vector_store
        self.llm = ChatGoogleGenerativeAI(
            model="gemini-1.5-flash",
            google_api_key=os.getenv("GOOGLE_API_KEY"),
            temperature=0.7,
            convert_system_message_to_human=True
        )
        
        # Data sources configuration
        self.data_sources = {
            "gdpr": {
                "title": "General Data Protection Regulation (GDPR)",
                "type": "regulation",
                "jurisdiction": "EU"
            },
            "hipaa": {
                "title": "Health Insurance Portability and Accountability Act (HIPAA)",
                "type": "regulation",
                "jurisdiction": "US"
            },
            "ccpa": {
                "title": "California Consumer Privacy Act (CCPA)",
                "type": "regulation",
                "jurisdiction": "California"
            },
            "yc_playbooks": {
                "title": "Y Combinator Legal Playbook",
                "type": "playbook",
                "jurisdiction": "Global"
            }
        }
        
        # Initialize legal document generation prompt
        self.legal_doc_prompt = ChatPromptTemplate.from_messages([
            ("system", """You are an expert legal document generator. Your task is to generate comprehensive legal information based on the specified regulation or playbook.
            Focus on:
            1. Key requirements and obligations
            2. Compliance deadlines
            3. Penalties and consequences
            4. Implementation guidelines
            5. Exemptions and exceptions
            
            Provide clear, concise, and actionable information in a structured format.
            Use bullet points or numbered lists for better readability.
            Include specific examples where relevant."""),
            ("human", """Generate legal information for:
            Title: {title}
            Type: {type}
            Jurisdiction: {jurisdiction}
            
            Please provide comprehensive legal information that would be relevant for businesses operating in this jurisdiction.""")
        ])
        
        # Initialize RAG prompt
        self.rag_prompt = ChatPromptTemplate.from_messages([
            ("system", """You are a legal document analyzer. Your task is to analyze and extract relevant information from legal documents.
            Focus on:
            1. Key requirements and obligations
            2. Compliance deadlines
            3. Penalties and consequences
            4. Implementation guidelines
            5. Exemptions and exceptions
            
            Provide clear, concise, and actionable information."""),
            ("human", """Context: {context}
            
            Query: {query}
            
            Please analyze the provided legal documents and answer the query with specific references to the source material.""")
        ])

    def generate_legal_document(self, source_info: Dict[str, str]) -> Dict[str, Any]:
        """Generate legal document content using LLM"""
        try:
            chain = LLMChain(llm=self.llm, prompt=self.legal_doc_prompt)
            content = chain.run(
                title=source_info["title"],
                type=source_info["type"],
                jurisdiction=source_info["jurisdiction"]
            )
            
            return {
                "title": source_info["title"],
                "source": f"Generated by LLM for {source_info['jurisdiction']}",
                "content": content,
                "jurisdiction": source_info["jurisdiction"],
                "type": source_info["type"]
            }
        except Exception as e:
            print(f"Error generating document for {source_info['title']}: {str(e)}")
            return None

    def collect_legal_documents(self) -> None:
        """Collect and process legal documents from all sources"""
        for source_name, source_info in self.data_sources.items():
            print(f"Generating document for {source_name}...")
            
            # Generate document content using LLM
            document = self.generate_legal_document(source_info)
            if not document:
                continue
                
            # Store in vector store
            self.vector_store.add_legal_document(
                document["content"],
                {
                    "source": document["source"],
                    "type": document["type"],
                    "jurisdiction": document["jurisdiction"],
                    "title": document["title"]
                }
            )
            
            print(f"Successfully generated and stored document for {source_name}")

    def retrieve_relevant_documents(self, query: str, jurisdiction: Optional[str] = None) -> List[Dict[str, Any]]:
        """Retrieve relevant legal documents using RAG"""
        # Search vector store
        results = self.vector_store.search_legal_documents(
            query,
            jurisdiction=jurisdiction
        )
        
        return results

    def analyze_legal_requirements(self, query: str, jurisdiction: Optional[str] = None) -> Dict[str, Any]:
        """Analyze legal requirements using RAG"""
        # Retrieve relevant documents
        relevant_docs = self.retrieve_relevant_documents(query, jurisdiction)
        
        if not relevant_docs:
            return {
                "status": "error",
                "message": "No relevant legal documents found"
            }
        
        # Prepare context from retrieved documents
        context = "\n\n".join([
            f"Source: {doc['metadata']['source']}\n"
            f"Jurisdiction: {doc['metadata']['jurisdiction']}\n"
            f"Content: {doc['content']}"
            for doc in relevant_docs
        ])
        
        # Generate analysis using LLM
        chain = LLMChain(llm=self.llm, prompt=self.rag_prompt)
        analysis = chain.run(context=context, query=query)
        
        return {
            "status": "success",
            "analysis": analysis,
            "sources": [doc["metadata"]["source"] for doc in relevant_docs]
        }

    def get_compliance_guidelines(self, domain: str, jurisdiction: str) -> Dict[str, Any]:
        """Get compliance guidelines for specific domain and jurisdiction"""
        query = f"Compliance requirements for {domain} in {jurisdiction}"
        return self.analyze_legal_requirements(query, jurisdiction)

    def get_startup_legal_playbook(self, domain: str) -> Dict[str, Any]:
        """Get startup legal playbook for specific domain"""
        query = f"Startup legal requirements and best practices for {domain}"
        return self.analyze_legal_requirements(query) 